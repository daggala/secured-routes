{"version":3,"sources":["Public.js","Protected.js","App.js","reportWebVitals.js","index.js"],"names":["Login","useState","username","setUsername","password","setPassword","history","useHistory","auth","a","axios","get","res","console","log","status","push","className","type","onChange","e","target","value","onClick","Protected","getProtected","window","location","useEffect","App","path","Public","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQA2CeA,MAvCf,WAAkB,IAAD,EACiBC,qBADjB,mBACRC,EADQ,KACEC,EADF,OAEiBF,qBAFjB,mBAERG,EAFQ,KAEEC,EAFF,KAITC,EAAUC,cAEVC,EAAI,uCAAG,4BAAAC,EAAA,+EAESC,IAAMC,IAAI,gBAAiB,CAC3CH,KAAM,CAAEN,WAAUE,cAHX,OAEHQ,EAFG,OAKTC,QAAQC,IAAI,OAAQF,GACD,MAAfA,EAAIG,QAGNT,EAAQU,KAAK,cATN,gDAYTH,QAAQC,IAAR,MAZS,yDAAH,qDAgBV,OACE,qBAAKG,UAAU,MAAf,SACE,gCACE,+CACA,uBACA,uBAAOC,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAOjB,EAAYiB,EAAEC,OAAOC,UACzD,uBACA,+CACA,uBACA,uBAAOJ,KAAK,WAAWC,SAAU,SAACC,GAAD,OAAOf,EAAYe,EAAEC,OAAOC,UAC7D,uBACA,wBAAQC,QAASf,EAAjB,yBCNOgB,EA3BG,WACAjB,cAAhB,IAEMkB,EAAY,uCAAG,4BAAAhB,EAAA,+EAECC,IAAMC,IAAI,cAFX,OAEXC,EAFW,OAIjBC,QAAQC,IAAI,OAAQF,GACD,MAAfA,EAAIG,SAMNW,OAAOC,SAAW,0BAXH,gDAcjBd,QAAQC,IAAR,MAdiB,yDAAH,qDAqBlB,OAHAc,qBAAU,WACRH,MACC,IACI,yBCNMI,MAjBf,WACE,OACE,qBAAKZ,UAAU,MAAf,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOa,KAAK,aAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAACC,EAAD,cCFGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6eee794f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction Login() {\n  const [username, setUsername] = useState();\n  const [password, setPassword] = useState();\n\n  const history = useHistory();\n\n  const auth = async () => {\n    try {\n      const res = await axios.get(\"/authenticate\", {\n        auth: { username, password },\n      });\n      console.log(\"res \", res);\n      if (res.status === 200) {\n        //we're using history here to relocate the user, but without\n        //making a new HTTP call\n        history.push(\"/protected\");\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div>\n        <label>Username: </label>\n        <br />\n        <input type=\"text\" onChange={(e) => setUsername(e.target.value)} />\n        <br />\n        <label>Password: </label>\n        <br />\n        <input type=\"password\" onChange={(e) => setPassword(e.target.value)} />\n        <br />\n        <button onClick={auth}>Login</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Protected = () => {\n  const history = useHistory();\n\n  const getProtected = async () => {\n    try {\n      const res = await axios.get(\"/protected\");\n\n      console.log(\"res \", res);\n      if (res.status === 200) {\n        //Even though we're already on at /protected\n        //we have to reload (make a HTTP call) in order\n        //to be able to fetch the index file for the private SPA.\n        //window.location.reload();\n      } else {\n        window.location = \"http://localhost:5000/\";\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    getProtected();\n  }, []);\n  return <div></div>;\n};\n\nexport default Protected;\n","import React from \"react\";\nimport { Switch, BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Public from \"./Public\";\nimport Protected from \"./Protected\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/protected\">\n            <Protected />\n          </Route>\n          <Route path=\"/\">\n            <Public />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}